<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AForge.Math</name>
    </assembly>
    <members>
        <member name="T:AForge.Math.Tools">
            <summary>
            Set of tool functions
            </summary>
            
            <remarks>The class contains different utility functions.</remarks>
            
        </member>
        <member name="M:AForge.Math.Tools.Pow2(System.Int32)">
            <summary>
            Calculates power of 2
            </summary>
            
            <param name="power">Power</param>
            
            <returns>Returns specified power of 2 in the case if power is in the range of
            [0, 30]. Otherwise returns 0.</returns>
            
        </member>
        <member name="M:AForge.Math.Tools.IsPowerOf2(System.Int32)">
            <summary>
            Checks if the specified integer is power of 2
            </summary>
            
            <param name="x">Integer number to check</param>
            
            <returns>Returns <b>true</b> if the specified number is power of 2.
            Otherwise returns <b>false</b>.</returns>
            
        </member>
        <member name="M:AForge.Math.Tools.Log2(System.Int32)">
            <summary>
            Get base of binary logarithm
            </summary>
            
            <param name="x">Source integer number</param>
            
            <returns>Power of the number (base of binary logarithm).</returns>
            
        </member>
        <member name="T:AForge.Math.Histogram">
            <summary>
            Histogram for discrete random values
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Math.Histogram.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Histogram"/> class
            </summary>
            
            <param name="values">Values of the histogram</param>
            
        </member>
        <member name="M:AForge.Math.Histogram.GetRange(System.Double)">
            <summary>
            Get range around median containing specified percentage of values
            </summary>
            
            <param name="percent">Values percentage around median</param>
            
            <returns>Returns the range which containes specifies percentage
            of values.</returns>
            
        </member>
        <member name="P:AForge.Math.Histogram.Values">
            <summary>
            Values of the histogram
            </summary>
            
        </member>
        <member name="P:AForge.Math.Histogram.Mean">
            <summary>
            Mean value
            </summary>
            
        </member>
        <member name="P:AForge.Math.Histogram.StdDev">
            <summary>
            Standard deviation
            </summary>
            
        </member>
        <member name="P:AForge.Math.Histogram.Median">
            <summary>
            Median value
            </summary>
            
        </member>
        <member name="P:AForge.Math.Histogram.Min">
            <summary>
            Minimum value
            </summary>
            
            <remarks>Minimum value of the histogram with non zero
            hits count.</remarks>
            
        </member>
        <member name="P:AForge.Math.Histogram.Max">
            <summary>
            Maximum value
            </summary>
            
            <remarks>Maximum value of the histogram with non zero
            hits count.</remarks>
            
        </member>
        <member name="T:AForge.Math.FourierTransform">
            <summary>
            Fourier transformation
            </summary>
            
            <remarks>The class implements one dimensional and two dimensional
            Discrete and Fast Fourier Transformation.</remarks>
            
        </member>
        <member name="M:AForge.Math.FourierTransform.DFT(AForge.Math.Complex[],AForge.Math.FourierTransform.Direction)">
            <summary>
            One dimensional Discrete Fourier Transform
            </summary>
            
            <param name="data">Data to transform</param>
            <param name="direction">Transformation direction</param>
            
        </member>
        <member name="M:AForge.Math.FourierTransform.DFT2(AForge.Math.Complex[0:,0:],AForge.Math.FourierTransform.Direction)">
            <summary>
            Two dimensional Discrete Fourier Transform
            </summary>
            
            <param name="data">Data to transform</param>
            <param name="direction">Transformation direction</param>
            
        </member>
        <member name="M:AForge.Math.FourierTransform.FFT(AForge.Math.Complex[],AForge.Math.FourierTransform.Direction)">
            <summary>
            One dimensional Fast Fourier Transform
            </summary>
            
            <param name="data">Data to transform</param>
            <param name="direction">Transformation direction</param>
            
        </member>
        <member name="M:AForge.Math.FourierTransform.FFT2(AForge.Math.Complex[0:,0:],AForge.Math.FourierTransform.Direction)">
            <summary>
            Two dimensional Fast Fourier Transform
            </summary>
            
            <param name="data">Data to transform</param>
            <param name="direction">Transformation direction</param>
            
        </member>
        <member name="T:AForge.Math.FourierTransform.Direction">
            <summary>
            Fourier transformation direction
            </summary>
        </member>
        <member name="F:AForge.Math.FourierTransform.Direction.Forward">
            <summary>
            Forward direction of Fourier transformation
            </summary>
        </member>
        <member name="F:AForge.Math.FourierTransform.Direction.Backward">
            <summary>
            Backward direction of Fourier transformation
            </summary>
        </member>
        <member name="T:AForge.Math.Gaussian">
            <summary>
            Gaussian function
            </summary>
            
            <remarks>The class represents Gaussian function.</remarks>
            
        </member>
        <member name="M:AForge.Math.Gaussian.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Gaussian"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Math.Gaussian.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Gaussian"/> class
            </summary>
            
            <param name="sigma">Sigma value</param>
            
        </member>
        <member name="M:AForge.Math.Gaussian.Function(System.Double)">
            <summary>
            1-D Gaussian function
            </summary>
            
            <param name="x">x value</param>
            
            <returns>Returns function's value at point <b>x</b>.</returns>
            
        </member>
        <member name="M:AForge.Math.Gaussian.Function2D(System.Double,System.Double)">
            <summary>
            2-D Gaussian function
            </summary>
            
            <param name="x">x value</param>
            <param name="y">y value</param>
            
            <returns>Returns function's value at point <b>(x, y)</b>.</returns>
            
        </member>
        <member name="M:AForge.Math.Gaussian.Kernel(System.Int32)">
            <summary>
            1-D Gaussian kernel
            </summary>
            
            <param name="size">Kernel size. The value should be odd and in the
            range of [3, 101].</param>
            
            <returns>Returns Gaussian kernel of specified size.</returns>
            
        </member>
        <member name="M:AForge.Math.Gaussian.Kernel2D(System.Int32)">
            <summary>
            2-D Gaussian kernel
            </summary>
            
            <param name="size">Kernel size. The value should be odd and in the
            range of [3, 101].</param>
            
            <returns>Returns Gaussian kernel of specified size.</returns>
            
        </member>
        <member name="M:AForge.Math.Gaussian.KernelDiscret(System.Int32)">
            <summary>
            1-D Gaussian discret kernel
            </summary>
            
            <param name="size">Kernel size. The value should be odd and in the
            range of [3, 101].</param>
            
            <returns>Returns Gaussian kernel of specified size.</returns>
            
        </member>
        <member name="M:AForge.Math.Gaussian.KernelDiscret2D(System.Int32)">
            <summary>
            2-D Gaussian kernel (discret)
            </summary>
            
            <param name="size">Kernel size. The value should be odd and in the
            range of [3, 101].</param>
            
            <returns>Returns Gaussian kernel of specified size.</returns>
            
        </member>
        <member name="P:AForge.Math.Gaussian.Sigma">
            <summary>
            Sigma value
            </summary>
            
            <remarks>Sigma property of Gaussian function. Default value is 1.
            Minimum allowed value is 0.00000001.</remarks>
            
        </member>
        <member name="T:AForge.Math.Complex">
            <summary>
            Complex number
            </summary>
            
            <remarks>The class encapsulate complex number and provides
            basic complex operators.</remarks>
            
        </member>
        <member name="F:AForge.Math.Complex.Re">
            <summary>
            Real part of the complex number
            </summary>
        </member>
        <member name="F:AForge.Math.Complex.Im">
            <summary>
            Imaginary part of the complex number
            </summary>
        </member>
        <member name="M:AForge.Math.Complex.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Complex"/> class
            </summary>
            
            <param name="re">Real part</param>
            <param name="im">Imaginary part</param>
            
        </member>
        <member name="M:AForge.Math.Complex.#ctor(AForge.Math.Complex)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Complex"/> class
            </summary>
            
            <param name="c">Source complex number</param>
            
        </member>
        <member name="M:AForge.Math.Complex.ToString">
            <summary>
            Returns string representation of the complex number
            </summary>
            
            <returns>String representation of the complex number</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.op_Addition(AForge.Math.Complex,AForge.Math.Complex)">
            <summary>
            Addition operator
            </summary>
            
            <param name="a">Left complex operand</param>
            <param name="b">Right complex operand</param>
            
            <returns>Result complex number</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.op_Subtraction(AForge.Math.Complex,AForge.Math.Complex)">
            <summary>
            Subtraction operator
            </summary>
            
            <param name="a">Left complex operand</param>
            <param name="b">Right complex operand</param>
            
            <returns>Result complex number</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.op_Multiply(AForge.Math.Complex,AForge.Math.Complex)">
            <summary>
            Multiplication operator
            </summary>
            
            <param name="a">Left complex operand</param>
            <param name="b">Right complex operand</param>
            
            <returns>Result complex number</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.op_Division(AForge.Math.Complex,AForge.Math.Complex)">
            <summary>
            Division operator
            </summary>
            
            <param name="a">Left complex operand</param>
            <param name="b">Right complex operand</param>
            
            <returns>Result complex number</returns>
            
        </member>
        <member name="P:AForge.Math.Complex.Zero">
            <summary>
            Represents complex zero
            </summary>
            
            <remarks>Represents complex number with both real and imaginary
            parts equal to zero.</remarks>
            
        </member>
        <member name="P:AForge.Math.Complex.Magnitude">
            <summary>
            Magnitude value of the complex number
            </summary>
        </member>
        <member name="P:AForge.Math.Complex.Phase">
            <summary>
            Phase value of the complex number
            </summary>
        </member>
        <member name="P:AForge.Math.Complex.SquaredMagnitude">
            <summary>
            Squared magnitude value of the complex number
            </summary>
        </member>
        <member name="T:AForge.Math.PerlinNoise">
            <summary>
            Perlin Noise function
            </summary>
            
            <remarks>The class represents Gaussian function.</remarks>
            
        </member>
        <member name="M:AForge.Math.PerlinNoise.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.PerlinNoise"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Math.PerlinNoise.#ctor(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.PerlinNoise"/> class
            </summary>
            
            <param name="initFrequency">Initial frequency</param>
            <param name="initAmplitude">Initial amplitude</param>
            <param name="persistance">Persistance</param>
            <param name="octaves">Octaves</param>
            
        </member>
        <member name="M:AForge.Math.PerlinNoise.Function(System.Double)">
            <summary>
            1-D Perlin noise function
            </summary>
            
            <param name="x">x value</param>
            
            <returns>Returns function's value at point <b>x</b>.</returns>
            
        </member>
        <member name="M:AForge.Math.PerlinNoise.Function2D(System.Double,System.Double)">
            <summary>
            2-D Perlin noise function
            </summary>
            
            <param name="x">x value</param>
            <param name="y">y value</param>
            
            <returns>Returns function's value at point <b>(x, y)</b>.</returns>
            
        </member>
        <member name="M:AForge.Math.PerlinNoise.Noise(System.Int32)">
            <summary>
            Ordinary noise function
            </summary>
        </member>
        <member name="M:AForge.Math.PerlinNoise.SmoothedNoise(System.Double)">
            <summary>
            Smoothed noise
            </summary>
        </member>
        <member name="M:AForge.Math.PerlinNoise.CosineInterpolate(System.Double,System.Double,System.Double)">
            <summary>
            Cosine interpolation
            </summary>
        </member>
        <member name="P:AForge.Math.PerlinNoise.InitFrequency">
            <summary>
            Initial frequency
            </summary>
        </member>
        <member name="P:AForge.Math.PerlinNoise.InitAplitude">
            <summary>
            Initial aplitude
            </summary>
        </member>
        <member name="P:AForge.Math.PerlinNoise.Persistance">
            <summary>
            Persistance
            </summary>
        </member>
        <member name="P:AForge.Math.PerlinNoise.Octaves">
            <summary>
            Octaves
            </summary>
        </member>
        <member name="T:AForge.Math.ContinuousHistogram">
            <summary>
            Histogram for continuous random values
            </summary>
            
            <remarks>The class also works with integer arrays as <see cref="T:AForge.Math.Histogram"/> class.
            But it also takes as parameter a range of random values. ... </remarks>
            
        </member>
        <member name="M:AForge.Math.ContinuousHistogram.#ctor(System.Int32[],AForge.DoubleRange)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.ContinuousHistogram"/> class
            </summary>
            
            <param name="values">Values of the histogram</param>
            <param name="range">Range of random values</param>
            
        </member>
        <member name="M:AForge.Math.ContinuousHistogram.GetRange(System.Double)">
            <summary>
            Get range around median containing specified percentage of values
            </summary>
            
            <param name="percent">Values percentage around median</param>
            
            <returns>Returns the range which containes specifies percentage
            of values.</returns>
            
        </member>
        <member name="P:AForge.Math.ContinuousHistogram.Values">
            <summary>
            Values of the histogram
            </summary>
            
        </member>
        <member name="P:AForge.Math.ContinuousHistogram.Range">
            <summary>
            Range of random values
            </summary>
            
        </member>
        <member name="P:AForge.Math.ContinuousHistogram.Mean">
            <summary>
            Mean value
            </summary>
            
        </member>
        <member name="P:AForge.Math.ContinuousHistogram.StdDev">
            <summary>
            Standard deviation
            </summary>
            
        </member>
        <member name="P:AForge.Math.ContinuousHistogram.Median">
            <summary>
            Median value
            </summary>
            
        </member>
        <member name="P:AForge.Math.ContinuousHistogram.Min">
            <summary>
            Minimum value
            </summary>
            
            <remarks>Minimum value of the histogram with non zero
            hits count.</remarks>
            
        </member>
        <member name="P:AForge.Math.ContinuousHistogram.Max">
            <summary>
            Maximum value
            </summary>
            
            <remarks>Maximum value of the histogram with non zero
            hits count.</remarks>
            
        </member>
        <member name="T:AForge.Math.Statistics">
            <summary>
            Set of statistics functions
            </summary>
            
            <remarks>The class represents collection of functions used
            in statistics</remarks>
            
        </member>
        <member name="M:AForge.Math.Statistics.Mean(System.Int32[])">
            <summary>
            Calculate mean value
            </summary>
            
            <param name="values">Histogram array</param>
            
            <returns>Returns mean value</returns>
            
            <remarks>The input array is treated as histogram, i.e. its
            indexes are treated as values of stochastic function, but
            array values are treated as "probabilities" (total amount of
            hits).</remarks>
            
        </member>
        <member name="M:AForge.Math.Statistics.StdDev(System.Int32[])">
            <summary>
            Calculate standard deviation
            </summary>
            
            <param name="values">Histogram array</param>
            
            <returns>Returns value of standard deviation</returns>
            
            <remarks>The input array is treated as histogram, i.e. its
            indexes are treated as values of stochastic function, but
            array values are treated as "probabilities" (total amount of
            hits).</remarks>
            
        </member>
        <member name="M:AForge.Math.Statistics.Median(System.Int32[])">
            <summary>
            Calculate median value
            </summary>
            
            <param name="values">Histogram array</param>
            
            <returns>Returns value of median</returns>
            
            <remarks>The input array is treated as histogram, i.e. its
            indexes are treated as values of stochastic function, but
            array values are treated as "probabilities" (total amount of
            hits).</remarks>
            
        </member>
        <member name="M:AForge.Math.Statistics.GetRange(System.Int32[],System.Double)">
            <summary>
            Get range around median containing specified percentage of values
            </summary>
            
            <param name="values">Histogram array</param>
            <param name="percent">Values percentage around median</param>
            
            <returns>Returns the range which containes specifies percentage
            of values.</returns>
            
        </member>
        <member name="M:AForge.Math.Statistics.Entropy(System.Int32[])">
            <summary>
            Calculate an entropy
            </summary>
            
            <param name="values">Histogram array</param>
            
            <returns>Returns entropy value</returns>
            
            <remarks>The input array is treated as histogram, i.e. its
            indexes are treated as values of stochastic function, but
            array values are treated as "probabilities" (total amount of
            hits).</remarks>
            
        </member>
    </members>
</doc>
